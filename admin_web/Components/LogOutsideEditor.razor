@page "/logoutsides/edit/{id:int}"
@using admin_web.Controllers;
@using admin_web.Entities;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager;

<PageTitle>Edit LogOutside</PageTitle>

<h1>Edit LogOutside</h1>

@if (logOutside == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>LoggerId*</th>
                <th>Temperature</th>
                <th>Humidity</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>
                    <input type="text" placeholder="Log Id" @bind="@logId" @oninput="@((e) => { logId=(int?)e.Value;})" />
                </th>
                <th>
                    <input type="text" placeholder="Temperature" @bind="@temperature" @oninput="@((e) => { temperature=ValidateInput((string)e.Value);})" />
                </th>
                <th>
                    <input type="text" placeholder="Humidity" @bind="@humidity" @oninput="@((e) => { humidity=ValidateInput((string)e.Value);})" />
                </th>
            </tr>
        </tbody>
    </table>
    <row>
        <col>
        <Button @onclick="() => Save(logOutside)">Save</Button>
        <col>
        <Button @onclick="() => Cancel()">Cancel</Button>
    </row>
}

@code
{
    [Parameter]
    public int id { get; set; }

    private int? logId { get; set; } = null;
    private double temperature { get; set; } = 0.0;
    private double humidity { get; set; } = 0.0;

    public LogOutside logOutside { get; set; }

    protected override async Task OnInitializedAsync()
    {
        logOutside = await LogOutsideController.Read(id);
        logId = logOutside.LogId;
        temperature = logOutside.Temperature;
        humidity = logOutside.Humidity;
    }

    private async void Save(LogOutside logOutside)
    {
        if (logId == null || temperature == null || humidity == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please fill all fields");
            return;
        }

        logOutside.LogId = logId;
        logOutside.Temperature = temperature;
        logOutside.Humidity = humidity;
        await LogOutsideController.Update(logOutside);

        NavigationManager.NavigateTo("/logoutsides");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/logoutsides");
    }

    private double ValidateInput(string input)
    {

        if (double.TryParse(input, out double d) && !Double.IsNaN(d) && !Double.IsInfinity(d))
        {
            return double.Parse(input);
        }

        return 0;
    }

}
